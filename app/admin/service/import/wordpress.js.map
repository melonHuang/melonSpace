{
    "version": 3,
    "sources": [
        "../../../../src/admin/service/import/wordpress.js"
    ],
    "names": [
        "WP_POST_STATUS",
        "publish",
        "future",
        "draft",
        "pending",
        "private",
        "trash",
        "formatArray",
        "obj",
        "i",
        "Array",
        "isArray",
        "length",
        "user",
        "channel",
        "hasOwnProperty",
        "authors",
        "authorsPromise",
        "map",
        "userModelInstance",
        "addUser",
        "username",
        "author",
        "email",
        "display_name",
        "password",
        "DEFAULT_USER_PWD",
        "type",
        "status",
        "all",
        "post",
        "item",
        "posts",
        "filter",
        "postsPromise",
        "where",
        "name",
        "find",
        "cate",
        "cates",
        "category",
        "$",
        "domain",
        "_",
        "cateModelInstance",
        "setRelation",
        "field",
        "select",
        "id",
        "summary",
        "title",
        "pathname",
        "decodeURIComponent",
        "content",
        "create_time",
        "formatDate",
        "Date",
        "pubDate",
        "update_time",
        "user_id",
        "comment_num",
        "allow_comment",
        "Number",
        "is_public",
        "tag",
        "markdown_content",
        "toMarkdown",
        "postModelInstance",
        "addPost",
        "console",
        "log",
        "page",
        "pages",
        "pagesPromise",
        "postStatus",
        "pageModelInstance",
        "tags",
        "tagsPromise",
        "tagModelInstance",
        "addTag",
        "categories",
        "categoriesPromise",
        "addCate",
        "pid",
        "parseFile",
        "file",
        "data",
        "readFileSync",
        "path",
        "encoding",
        "parser",
        "Parser",
        "parseString",
        "think",
        "promisify",
        "wxrJSON",
        "rss",
        "run",
        "importData"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/service/import/wordpress.js",
    "sourcesContent": [
        "import fs from 'fs';\nimport Base from './base';\nimport xml2js from 'xml2js';\n\nconst WP_POST_STATUS = {\n  publish: 3, //发布\n  future: 3,  //未来发布\n  draft: 0, //草稿\n  pending: 1, //待审核\n  private: 3, //私密文章对应 is_public 字段为 false, 发布状态为已发布\n  trash: 2, //删除文章没有对应关系遂转为已拒绝文章\n};\n\nexport default class extends Base {\n\n  formatArray(obj) {\n    for(var i in obj) {\n      if( Array.isArray(obj[i]) && obj[i].length === 1 ) {\n        obj[i] = obj[i][0];\n      } else if( typeof(obj[i]) === 'object' ) {\n        obj[i] = this.formatArray(obj[i]);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * 导入用户\n   */\n  async user(channel) {\n    /** 无用户无需导入返回导入0个用户 */\n    if(!channel.hasOwnProperty('wp:author')) {\n      return 0;\n    }\n\n    let authors = channel['wp:author'];\n\n    let authorsPromise = authors.map(author => this.userModelInstance.addUser({\n      username: author['wp:author_login'][0],\n      email: author['wp:author_email'][0],\n      display_name: author['wp:author_display_name'][0],\n      password: Base.DEFAULT_USER_PWD,\n      type: 2, //默认导入用户都为编辑\n      status: 2, //默认导入用户都处于禁用状态\n    }, '127.0.0.1'));\n    await Promise.all(authorsPromise);\n\n    return authors.length; //返回最终导入用户的数量\n  }\n\n  /**\n   * 导入文章\n   */\n  async post(channel) {\n    if( !Array.isArray(channel.item) ) {\n      return 0;\n    }\n\n    let posts = channel.item.filter(item => item['wp:post_type'][0] ==='post');\n    let postsPromise = posts.map(async item => {\n      try{\n        //获取用户\n        let user = await this.userModelInstance.where({name: item['dc:creator'][0]}).find();\n        //查询分类 ID\n        let cate = [];\n        if( item.hasOwnProperty('category') ) {\n          let cates = item.category.filter(item => item.$.domain === 'category').map(item => item._);\n          if( Array.isArray(cates) && cates.length > 0 ) {\n            cate = await this.cateModelInstance.setRelation(false).field('id').where({name: ['IN', cates]}).select();\n            cate = cate.map(item => item.id);\n          }\n        }\n\n        //摘要有可能是空\n        let summary;\n        if( item.hasOwnProperty('excerpt:encoded') && item['excerpt:encoded'][0] !== '' ) {\n          summary = item['excerpt:encoded'][0];\n        } else {\n          summary = item['content:encoded'][0];\n        }\n\n        let post = {\n          title: item.title[0],\n          pathname: decodeURIComponent(item['wp:post_name'][0]),\n          content: item['content:encoded'][0],\n          summary,\n          create_time: this.formatDate(new Date(item.pubDate[0])),\n          update_time: item['wp:post_date'][0],\n          status: WP_POST_STATUS[ item['wp:status'][0] ] || 0,\n          user_id: user.id,\n          comment_num: 0,\n          allow_comment: Number(item['wp:comment_status'][0] === 'open'),\n          is_public: Number(item['wp:status'][0] !== 'private'),\n          tag: item.hasOwnProperty('category') ? item.category.filter(item => item.$.domain === 'post_tag').map(item => item._) : [],\n          cate\n        };\n\n        post.markdown_content = this.toMarkdown(post.content);\n        await this.postModelInstance.addPost(post);\n      } catch(e) { console.log(e)}\n    });\n    await Promise.all(postsPromise);\n\n    return posts.length;\n  }\n\n  /**\n   * 导入页面\n   */\n  async page(channel) {\n    if( !Array.isArray(channel.item) ) {\n      return 0;\n    }\n\n    let pages = channel.item.filter(item => item['wp:post_type'][0] === 'page');\n    let pagesPromise = pages.map(async item => {\n      let user = await this.userModelInstance.where({name: item['dc:creator'][0]}).find();\n      let summary = item['excerpt:encoded'][0];\n      if( summary === '' ) {\n        summary = item['content:encoded'][0];\n      }\n\n      let page = {\n        title: item.title[0],\n        pathname: decodeURIComponent(item['wp:post_name'][0]),\n        content: item['content:encoded'][0],\n        summary,\n        create_time: this.formatDate(new Date(item.pubDate[0])),\n        update_time: item['wp:post_date'][0],\n        status: postStatus[ item['wp:status'][0] ] || 0,\n        user_id: user.id,\n        comment_num: 0,\n        allow_comment: item['wp:comment_status'][0] === 'open',\n        is_public: item['wp:status'][0] !== 'private',\n      };\n      page.markdown_content = this.toMarkdown(page.content);\n      await this.pageModelInstance.addPost(page);\n    });\n    Promise.all(pagesPromise);\n\n    return pages.length;\n  }\n\n  /**\n   * 导入标签\n   */\n  async tag(channel) {\n    if( !Array.isArray(channel['wp:tag']) ) {\n      return 0;\n    }\n\n    let tags = channel['wp:tag'];\n    let tagsPromise = tags.map(tag => this.tagModelInstance.addTag({\n      name: tag['wp:tag_name'][0],\n      pathname: decodeURIComponent(tag['wp:tag_slug'][0])\n    }));\n    await Promise.all(tagsPromise);\n\n    return tags.length;\n  }\n\n  /**\n   * 导入分类\n   * 为了简单不支持子分类导入，默认所有分类为一级分类\n   */\n  async category(channel) {\n    if( !Array.isArray(channel['wp:category']) ) {\n      return 0;\n    }\n\n    let categories = channel['wp:category'];\n    let categoriesPromise = categories.map(cate => this.cateModelInstance.addCate({\n      name: cate['wp:cat_name'][0],\n      pathname: decodeURIComponent(cate['wp:category_nicename'][0]),\n      pid: 0\n    }));\n    await Promise.all(categoriesPromise);\n    \n    return categories.length;\n  }\n\n  /**\n   * 处理上传文件获取导入数据\n   */\n  async parseFile(file) {\n    let data = fs.readFileSync(file.path, {encoding: 'utf-8'});\n\n    let parser = new xml2js.Parser();\n    let parseString = think.promisify(parser.parseString, parser);\n    let wxrJSON = await parseString(data);\n    \n    return this.formatArray(wxrJSON).rss.channel;\n  }\n\n  /**\n   * 执行导入\n   */\n  async run(file) {\n    let channel = await this.parseFile(file);\n    return await this.importData(channel);\n  }\n}\n"
    ]
}